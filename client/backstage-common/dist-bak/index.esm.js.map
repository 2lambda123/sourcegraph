{"version":3,"file":"index.esm.js","sources":["../src/catalog/parsers.ts","../src/client/Query.ts","../src/client/SourcegraphClient.ts","../src/providers/SourcegraphEntityProvider.ts","../src/index.ts"],"sourcesContent":["import {\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n} from '@backstage/catalog-model';\nimport { CatalogProcessorEntityResult, DeferredEntity, parseEntityYaml } from '@backstage/plugin-catalog-backend';\nimport { SearchResult } from '../client';\n\nexport const parseCatalog = (src: SearchResult[], providerName: string): DeferredEntity[] => {\n  const results: DeferredEntity[] = [];\n\n  src.forEach((r: SearchResult) => {\n    const location = {\n      \"type\": \"url\",\n      \"target\": `${r.repository}/catalog-info.yaml`,\n    }\n    const yaml = Buffer.from(r.fileContent, \"utf8\")\n\n    for (const item of parseEntityYaml(yaml, location)) {\n      const parsed = item as CatalogProcessorEntityResult;\n      results.push({\n        entity: {\n          ...parsed.entity,\n          metadata: {\n            ...parsed.entity.metadata,\n            annotations: {\n              ...parsed.entity.metadata.annotations,\n              [ANNOTATION_LOCATION]: `url:${parsed.location.target}`,\n              [ANNOTATION_ORIGIN_LOCATION]: providerName\n            }\n          }\n        },\n        locationKey: parsed.location.target,\n      });\n    }\n  });\n  return results\n};\n","import { gql } from 'graphql-request';\nimport { AuthenticatedUser, currentAuthStateQuery } from '@sourcegraph/shared/src/auth'\n\nexport interface Query<T> {\n  gql(): string\n  vars(): string\n  Marshal(data: any): T[]\n}\n\nexport interface SearchResult {\n  readonly repository: string\n  readonly fileContent: string\n\n}\n\nexport class SearchQuery implements Query<SearchResult> {\n  private readonly query: string\n\n  constructor(query: string) {\n    this.query = query;\n  }\n\n  Marshal(data: any): SearchResult[] {\n    const results = new Array<SearchResult>();\n\n    for (let v in data.search.results.results) {\n      let { repository, file: { fileContent }\n      } = v as any\n      results.push({ repository, fileContent })\n    }\n\n    return results\n  }\n\n  vars(): any {\n    return { search: this.query }\n  }\n\n  gql(): string {\n    return gql`\n      query ($search: String!) {\n        search(query: $search) {\n          results {\n            __typename\n            ... on FileMatch {\n              repository\n            }\n            file {\n              content\n            }\n          }\n        }\n      }\n    `\n  }\n\n}\n\nexport class UserQuery implements Query<string> {\n  Marshal(data: any): string[] {\n    if (\"currentUser\" in data) {\n      return [data.currentUser.username]\n    }\n    throw new Error(\"username not found\")\n  }\n  vars(): string {\n    return \"\"\n  }\n  gql(): string {\n    return gql`\n    query {\n      currentUser {\n        username\n      }\n    }\n    `\n  }\n\n}\n\nexport type { AuthenticatedUser } from '@sourcegraph/shared/src/auth'\nexport class AuthenticatedUserQuery implements Query<AuthenticatedUser>  {\n  gql(): string {\n    return currentAuthStateQuery\n  }\n  vars(): string {\n    return \"\"\n  }\n  Marshal(data: any): AuthenticatedUser[] {\n    return [data.currentUser]\n  }\n}\n","import { GraphQLClient } from 'graphql-request';\nimport { UserQuery, Query, AuthenticatedUser, AuthenticatedUserQuery, SearchQuery, SearchResult } from './Query';\n\n\n\nexport interface Config {\n  endpoint: string,\n  token: string,\n  sudoUsername?: string\n}\n\nexport interface UserService {\n  CurrentUsername(): Promise<string>\n  GetAuthenticatedUser(): Promise<AuthenticatedUser>\n}\n\nexport const createService = (config: Config): SourcegraphService => {\n  const { endpoint, token, sudoUsername } = config\n  const base = new BaseClient(endpoint, token, sudoUsername || \"\")\n  return new SourcegraphClient(base)\n}\n\nexport interface SearchService {\n  SearchQuery(query: string): Promise<SearchResult[]>\n}\n\nexport interface SourcegraphService {\n  Users: UserService\n  Search: SearchService\n}\n\nclass SourcegraphClient implements SourcegraphService, UserService, SearchService {\n  private client: BaseClient\n  Users: UserService = this\n  Search: SearchService = this\n\n  constructor(client: BaseClient) {\n    this.client = client\n  }\n\n  async SearchQuery(query: string): Promise<SearchResult[]> {\n    const q = new SearchQuery(query)\n    const data = await this.client.fetch(q)\n\n    return q.Marshal(data)\n  }\n\n  async CurrentUsername(): Promise<string> {\n    const q = new UserQuery()\n\n    const data = await this.client.fetch(q)\n    return data[0]\n  }\n\n  async GetAuthenticatedUser(): Promise<AuthenticatedUser> {\n    const q = new AuthenticatedUserQuery()\n    const data = await this.client.fetch(q)\n    return data[0]\n  }\n\n}\n\nclass BaseClient {\n  private client: GraphQLClient\n\n  constructor(baseUrl: string, token: string, sudoUsername: string) {\n    const authz = sudoUsername?.length > 0 ? `token-sudo user=\"${sudoUsername}\",token=\"${token}\"` : `token ${token}`\n    const apiUrl = `${baseUrl}/.api/graphql`\n    this.client = new GraphQLClient(apiUrl,\n      {\n        headers: {\n          'X-Requested-With': `Sourcegraph - Backstage plugin DEV`,\n          Authorization: authz,\n        }\n      })\n  }\n\n  async fetch<T>(q: Query<T>): Promise<T[]> {\n    const data = await this.client.request(q.gql(), q.vars())\n\n    return q.Marshal(data)\n  }\n}\n\n","import {\n  EntityProvider,\n  EntityProviderConnection,\n} from '@backstage/plugin-catalog-backend';\nimport { Config } from '@backstage/config';\nimport { SourcegraphService, createService } from '../client';\nimport { parseCatalog } from '../catalog/parsers';\n\nexport class SourcegraphEntityProvider implements EntityProvider {\n  private connection?: EntityProviderConnection;\n  private readonly sourcegraph: SourcegraphService;\n\n  static create(config: Config) {\n    return new SourcegraphEntityProvider(config);\n  }\n\n  private constructor(config: Config) {\n    const endpoint = config.getString(\"sourcegraph.endpoint\")\n    const token = config.getString(\"sourcegraph.token\")\n    const sudoUsername = config.getOptionalString(\"sourcegraph.sudoUsername\")\n\n    this.sourcegraph = createService({ endpoint, token, sudoUsername })\n  }\n\n  getProviderName(): string {\n    return 'sourcegraph-entity-provider';\n  }\n\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    this.connection = connection;\n  }\n\n  async fullMutation() {\n    const results = await this.sourcegraph.Search.SearchQuery(`\"file:^catalog-info.yaml$\"`)\n\n    const entities = parseCatalog(results, this.getProviderName());\n\n    await this.connection?.applyMutation({\n      type: \"full\",\n      entities: entities\n    });\n  }\n\n\n}\n","/***/\n/**\n * Common functionalities for the sg-common plugin.\n *\n * @packageDocumentation\n */\n\nexport * from './catalog'\nexport * from './providers'\nexport * from './client'\nexport { }\nconsole.log(\"HELLO\")\n"],"names":[],"mappings":";;;;;AAOa,MAAA,YAAA,GAAe,CAAC,GAAA,EAAqB,YAA2C,KAAA;AAC3F,EAAA,MAAM,UAA4B,EAAC,CAAA;AAEnC,EAAI,GAAA,CAAA,OAAA,CAAQ,CAAC,CAAoB,KAAA;AAC/B,IAAA,MAAM,QAAW,GAAA;AAAA,MACf,MAAQ,EAAA,KAAA;AAAA,MACR,QAAA,EAAU,GAAG,CAAE,CAAA,UAAA,CAAA,kBAAA,CAAA;AAAA,KACjB,CAAA;AACA,IAAA,MAAM,IAAO,GAAA,MAAA,CAAO,IAAK,CAAA,CAAA,CAAE,aAAa,MAAM,CAAA,CAAA;AAE9C,IAAA,KAAA,MAAW,IAAQ,IAAA,eAAA,CAAgB,IAAM,EAAA,QAAQ,CAAG,EAAA;AAClD,MAAA,MAAM,MAAS,GAAA,IAAA,CAAA;AACf,MAAA,OAAA,CAAQ,IAAK,CAAA;AAAA,QACX,MAAQ,EAAA;AAAA,UACN,GAAG,MAAO,CAAA,MAAA;AAAA,UACV,QAAU,EAAA;AAAA,YACR,GAAG,OAAO,MAAO,CAAA,QAAA;AAAA,YACjB,WAAa,EAAA;AAAA,cACX,GAAG,MAAO,CAAA,MAAA,CAAO,QAAS,CAAA,WAAA;AAAA,cAC1B,CAAC,mBAAmB,GAAG,CAAA,IAAA,EAAO,OAAO,QAAS,CAAA,MAAA,CAAA,CAAA;AAAA,cAC9C,CAAC,0BAA0B,GAAG,YAAA;AAAA,aAChC;AAAA,WACF;AAAA,SACF;AAAA,QACA,WAAA,EAAa,OAAO,QAAS,CAAA,MAAA;AAAA,OAC9B,CAAA,CAAA;AAAA,KACH;AAAA,GACD,CAAA,CAAA;AACD,EAAO,OAAA,OAAA,CAAA;AACT;;ACrBO,MAAM,WAA2C,CAAA;AAAA,EAGtD,YAAY,KAAe,EAAA;AACzB,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AAAA,GACf;AAAA,EAEA,QAAQ,IAA2B,EAAA;AACjC,IAAM,MAAA,OAAA,GAAU,IAAI,KAAoB,EAAA,CAAA;AAExC,IAAA,KAAA,IAAS,CAAK,IAAA,IAAA,CAAK,MAAO,CAAA,OAAA,CAAQ,OAAS,EAAA;AACzC,MAAI,IAAA;AAAA,QAAE,UAAA;AAAA,QAAY,IAAA,EAAM,EAAE,WAAY,EAAA;AAAA,OAClC,GAAA,CAAA,CAAA;AACJ,MAAA,OAAA,CAAQ,IAAK,CAAA,EAAE,UAAY,EAAA,WAAA,EAAa,CAAA,CAAA;AAAA,KAC1C;AAEA,IAAO,OAAA,OAAA,CAAA;AAAA,GACT;AAAA,EAEA,IAAY,GAAA;AACV,IAAO,OAAA,EAAE,MAAQ,EAAA,IAAA,CAAK,KAAM,EAAA,CAAA;AAAA,GAC9B;AAAA,EAEA,GAAc,GAAA;AACZ,IAAO,OAAA,GAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAA,CAAA,CAAA;AAAA,GAeT;AAEF,CAAA;AAEO,MAAM,SAAmC,CAAA;AAAA,EAC9C,QAAQ,IAAqB,EAAA;AAC3B,IAAA,IAAI,iBAAiB,IAAM,EAAA;AACzB,MAAO,OAAA,CAAC,IAAK,CAAA,WAAA,CAAY,QAAQ,CAAA,CAAA;AAAA,KACnC;AACA,IAAM,MAAA,IAAI,MAAM,oBAAoB,CAAA,CAAA;AAAA,GACtC;AAAA,EACA,IAAe,GAAA;AACb,IAAO,OAAA,EAAA,CAAA;AAAA,GACT;AAAA,EACA,GAAc,GAAA;AACZ,IAAO,OAAA,GAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAA,CAAA,CAAA;AAAA,GAOT;AAEF,CAAA;AAGO,MAAM,sBAA4D,CAAA;AAAA,EACvE,GAAc,GAAA;AACZ,IAAO,OAAA,qBAAA,CAAA;AAAA,GACT;AAAA,EACA,IAAe,GAAA;AACb,IAAO,OAAA,EAAA,CAAA;AAAA,GACT;AAAA,EACA,QAAQ,IAAgC,EAAA;AACtC,IAAO,OAAA,CAAC,KAAK,WAAW,CAAA,CAAA;AAAA,GAC1B;AACF;;AC3Ea,MAAA,aAAA,GAAgB,CAAC,MAAuC,KAAA;AACnE,EAAA,MAAM,EAAE,QAAA,EAAU,KAAO,EAAA,YAAA,EAAiB,GAAA,MAAA,CAAA;AAC1C,EAAA,MAAM,OAAO,IAAI,UAAA,CAAW,QAAU,EAAA,KAAA,EAAO,gBAAgB,EAAE,CAAA,CAAA;AAC/D,EAAO,OAAA,IAAI,kBAAkB,IAAI,CAAA,CAAA;AACnC,EAAA;AAWA,MAAM,iBAA4E,CAAA;AAAA,EAKhF,YAAY,MAAoB,EAAA;AAHhC,IAAqB,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA;AACrB,IAAwB,IAAA,CAAA,MAAA,GAAA,IAAA,CAAA;AAGtB,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AAAA,GAChB;AAAA,EAEA,MAAM,YAAY,KAAwC,EAAA;AACxD,IAAM,MAAA,CAAA,GAAI,IAAI,WAAA,CAAY,KAAK,CAAA,CAAA;AAC/B,IAAA,MAAM,IAAO,GAAA,MAAM,IAAK,CAAA,MAAA,CAAO,MAAM,CAAC,CAAA,CAAA;AAEtC,IAAO,OAAA,CAAA,CAAE,QAAQ,IAAI,CAAA,CAAA;AAAA,GACvB;AAAA,EAEA,MAAM,eAAmC,GAAA;AACvC,IAAM,MAAA,CAAA,GAAI,IAAI,SAAU,EAAA,CAAA;AAExB,IAAA,MAAM,IAAO,GAAA,MAAM,IAAK,CAAA,MAAA,CAAO,MAAM,CAAC,CAAA,CAAA;AACtC,IAAA,OAAO,KAAK,CAAC,CAAA,CAAA;AAAA,GACf;AAAA,EAEA,MAAM,oBAAmD,GAAA;AACvD,IAAM,MAAA,CAAA,GAAI,IAAI,sBAAuB,EAAA,CAAA;AACrC,IAAA,MAAM,IAAO,GAAA,MAAM,IAAK,CAAA,MAAA,CAAO,MAAM,CAAC,CAAA,CAAA;AACtC,IAAA,OAAO,KAAK,CAAC,CAAA,CAAA;AAAA,GACf;AAEF,CAAA;AAEA,MAAM,UAAW,CAAA;AAAA,EAGf,WAAA,CAAY,OAAiB,EAAA,KAAA,EAAe,YAAsB,EAAA;AAChE,IAAA,MAAM,SAAQ,YAAc,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAA,MAAA,IAAS,IAAI,CAAoB,iBAAA,EAAA,YAAA,CAAA,SAAA,EAAwB,WAAW,CAAS,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;AACzG,IAAA,MAAM,SAAS,CAAG,EAAA,OAAA,CAAA,aAAA,CAAA,CAAA;AAClB,IAAA,IAAA,CAAK,SAAS,IAAI,aAAA;AAAA,MAAc,MAAA;AAAA,MAC9B;AAAA,QACE,OAAS,EAAA;AAAA,UACP,kBAAoB,EAAA,CAAA,kCAAA,CAAA;AAAA,UACpB,aAAe,EAAA,KAAA;AAAA,SACjB;AAAA,OACF;AAAA,KAAC,CAAA;AAAA,GACL;AAAA,EAEA,MAAM,MAAS,CAA2B,EAAA;AACxC,IAAM,MAAA,IAAA,GAAO,MAAM,IAAA,CAAK,MAAO,CAAA,OAAA,CAAQ,EAAE,GAAI,EAAA,EAAG,CAAE,CAAA,IAAA,EAAM,CAAA,CAAA;AAExD,IAAO,OAAA,CAAA,CAAE,QAAQ,IAAI,CAAA,CAAA;AAAA,GACvB;AACF;;AC1EO,MAAM,yBAAoD,CAAA;AAAA,EAI/D,OAAO,OAAO,MAAgB,EAAA;AAC5B,IAAO,OAAA,IAAI,0BAA0B,MAAM,CAAA,CAAA;AAAA,GAC7C;AAAA,EAEQ,YAAY,MAAgB,EAAA;AAClC,IAAM,MAAA,QAAA,GAAW,MAAO,CAAA,SAAA,CAAU,sBAAsB,CAAA,CAAA;AACxD,IAAM,MAAA,KAAA,GAAQ,MAAO,CAAA,SAAA,CAAU,mBAAmB,CAAA,CAAA;AAClD,IAAM,MAAA,YAAA,GAAe,MAAO,CAAA,iBAAA,CAAkB,0BAA0B,CAAA,CAAA;AAExE,IAAA,IAAA,CAAK,cAAc,aAAc,CAAA,EAAE,QAAU,EAAA,KAAA,EAAO,cAAc,CAAA,CAAA;AAAA,GACpE;AAAA,EAEA,eAA0B,GAAA;AACxB,IAAO,OAAA,6BAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAM,QAAQ,UAAqD,EAAA;AACjE,IAAA,IAAA,CAAK,UAAa,GAAA,UAAA,CAAA;AAAA,GACpB;AAAA,EAEA,MAAM,YAAe,GAAA;AAhCvB,IAAA,IAAA,EAAA,CAAA;AAiCI,IAAA,MAAM,UAAU,MAAM,IAAA,CAAK,WAAY,CAAA,MAAA,CAAO,YAAY,CAA4B,0BAAA,CAAA,CAAA,CAAA;AAEtF,IAAA,MAAM,QAAW,GAAA,YAAA,CAAa,OAAS,EAAA,IAAA,CAAK,iBAAiB,CAAA,CAAA;AAE7D,IAAM,OAAA,CAAA,EAAA,GAAA,IAAA,CAAK,UAAL,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAiB,aAAc,CAAA;AAAA,MACnC,IAAM,EAAA,MAAA;AAAA,MACN,QAAA;AAAA,KACF,CAAA,CAAA,CAAA;AAAA,GACF;AAGF;;ACjCA,OAAA,CAAQ,IAAI,OAAO,CAAA;;;;"}