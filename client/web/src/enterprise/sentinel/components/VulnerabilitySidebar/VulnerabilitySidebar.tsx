import { FC, ReactNode, ReactElement } from 'react'
import { ApolloQueryResult, OperationVariables } from '@apollo/client'
import { getFiltersOfKind, FilterLink, SearchSidebar, SearchSidebarSection, CodeHostIcon } from '@sourcegraph/branded'
import { displayRepoName } from '@sourcegraph/shared/src/components/RepoLink'
import { SectionID } from '@sourcegraph/shared/src/settings/temporary/searchSidebar'
import { FilterType } from '@sourcegraph/shared/src/search/query/filters'
import { VulnerabilityMatchesResult } from '../../../../graphql-operations'
import styles from './VulnerabilitySidebar.module.scss'

export interface VulnerabilitySidebarProps {
    onShowMobileFiltersChanged: React.Dispatch<React.SetStateAction<boolean>>
    onFilterChosen: (
        variables?: Partial<OperationVariables> | undefined
    ) => Promise<ApolloQueryResult<VulnerabilityMatchesResult>>
}

// TODO: add react memo
export const VulnerabilitySidebarView: FC<VulnerabilitySidebarProps> = ({
    onShowMobileFiltersChanged,
    onFilterChosen,
}) => {
    const mockFilters = [
        {
            value: 'github.com/sourcegraph/sourcegraph',
            label: 'github.com/sourcegraph/sourcegraph',
            count: 1,
            limitHit: false,
            kind: 'repo',
        },
        {
            value: 'github.com/test1/test1',
            label: 'github.com/test1/test1',
            count: 1,
            limitHit: false,
            kind: 'repo',
        },
        {
            value: 'github.com/etcd/etcd',
            label: 'github.com/etcd/etcd',
            count: 1,
            limitHit: false,
            kind: 'repo',
        },
        {
            value: 'github.com/hashicorp/hashicorp',
            label: 'github.com/hashicorp/hashicorp',
            count: 1,
            limitHit: false,
            kind: 'repo',
        },
    ]
    const severity = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'ALL']
    const languages = ['go', 'typescript']

    return (
        <SearchSidebar onClose={() => onShowMobileFiltersChanged(prev => !prev)} className={styles.sidebarContainer}>
            <SearchSidebarSection sectionId={SectionID.SEVERITY} header="Severity" minItems={5}>
                {severity.map((severity, idx) => (
                    <FilterLink
                        key={idx}
                        value={severity}
                        label={severity.toLowerCase()}
                        onFilterChosen={() =>
                            onFilterChosen({ severity: severity === 'ALL' ? '' : severity, language: '' })
                        }
                    />
                ))}
            </SearchSidebarSection>

            <SearchSidebarSection sectionId={SectionID.LANGUAGES} header="Languages" minItems={2}>
                {languages.map((language, idx) => (
                    <FilterLink
                        key={idx}
                        value={`lang:${language}`}
                        label={language}
                        onFilterChosen={() => onFilterChosen({ severity: '', language })}
                    />
                ))}
            </SearchSidebarSection>

            <SearchSidebarSection
                sectionId={SectionID.REPOSITORIES}
                header="Repositories"
                searchOptions={{
                    ariaLabel: 'Find repositories',
                    noResultText: getRepoFilterNoResultText,
                }}
                minItems={1}
            >
                {getRepoFilterLinks(mockFilters, el => console.log('clicked', el))}
            </SearchSidebarSection>
        </SearchSidebar>
    )
}

const getRepoFilterNoResultText = (repoFilterLinks: ReactElement[]): ReactNode => (
    <span>None of the top {repoFilterLinks.length} repositories in your results match this filter.</span>
)

export const getRepoFilterLinks = (
    filters: any | undefined,
    onFilterChosen: (value: string, kind?: string) => void
): React.ReactElement[] => {
    function repoLabelConverter(label: string): JSX.Element {
        const Icon = CodeHostIcon({
            repoName: label,
            className: styles.sidebarSectionIcon,
        })

        return (
            <span className={styles.sidebarSectionListItemBreakWords}>
                {Icon ? (
                    <>
                        {Icon}
                        {displayRepoName(label)}
                    </>
                ) : (
                    label
                )}
            </span>
        )
    }

    return getFiltersOfKind(filters, FilterType.repo).map(filter => (
        <FilterLink
            {...filter}
            key={`${filter.label}-${filter.value}`}
            labelConverter={repoLabelConverter}
            onFilterChosen={onFilterChosen}
            ariaLabel={`Search in repository ${filter.label}`}
        />
    ))
}
