import { FC } from 'react'
import { mdiEyeOff, mdiCheckCircle } from '@mdi/js'
import classNames from 'classnames'

import { Badge, Button, Icon } from '@sourcegraph/wildcard'
import { LocationGroup } from '../../../../codeintel/location'
import { CodeBlock } from '../CodeBlock/CodeBlock'

import styles from './VulnerabilityCard.module.scss'

export interface VulnerableCodeProps {
    repository: string
    fileName: string
    group: LocationGroup[]
}

export interface VulnerabilityProps {
    cve: string
    description: string
    dependency: string
    packageManager: string
    publishedDate: string
    lastUpdate: string
    sourceFile: string
    sourceFileLineNumber: number
    currentVersion: string
    severityScore: string
    severityString: string
    vulnerableCode: VulnerableCodeProps[]
}

interface VulnerabilityCardProps {
    data: VulnerabilityProps
}

export const VulnerabilityCard: FC<VulnerabilityCardProps> = ({
    data: {
        cve,
        description,
        dependency,
        packageManager,
        publishedDate,
        lastUpdate,
        sourceFile,
        sourceFileLineNumber,
        currentVersion,
        severityScore,
        severityString,
        vulnerableCode,
    },
}) => (
    <CardContainer>
        <Header cve={cve} severityScore={severityScore} severityString={severityString} />
        <Content>
            <Description description={description} />
            <Versions currentVersion={currentVersion} />
            <DescriptionTable
                dependency={dependency}
                packageManager={packageManager}
                publishedDate={publishedDate}
                lastUpdate={lastUpdate}
            />
        </Content>
        <CodeBlock vulnerableCode={vulnerableCode} />
    </CardContainer>
)

/*
 * CardContainer
 */

interface CardContainerProps {
    children: React.ReactNode
}
const CardContainer: FC<CardContainerProps> = ({ children }) => <div className={styles.container}>{children}</div>

/*
 * Header
 */

interface HeaderProps {
    cve: string
    severityScore: string
    severityString: string
}
const Header: FC<HeaderProps> = ({ cve, severityScore, severityString }) => (
    <div className={styles.headerContainer}>
        <div className={styles.title}>
            <div>
                <Badge variant="warning">
                    {severityScore} {severityString}
                </Badge>
                <span className={styles.cve}>{cve}</span>
            </div>
        </div>
        <div className={styles.buttonContainer}>
            <Button variant="secondary">
                <Icon aria-hidden={true} svgPath={mdiEyeOff} />
                Ignore
            </Button>
            <Button variant="secondary">
                <Icon aria-hidden={true} svgPath={mdiCheckCircle} />
                Mark as Resolved
            </Button>
        </div>
    </div>
)

/*
 * Content
 */

interface ContentProps {
    children: React.ReactNode
}
const Content: FC<ContentProps> = ({ children }) => <div className={styles.content}>{children}</div>

/*
 * DescriptionTable
 */

interface DescriptionTableProps {
    dependency: string
    packageManager: string
    publishedDate: string
    lastUpdate: string
}
const DescriptionTable: FC<DescriptionTableProps> = ({ dependency, packageManager, publishedDate, lastUpdate }) => {
    const headers = ['Dependency', 'Package Manager', 'Published Date', 'Last Updated']
    const values = [dependency, packageManager, publishedDate, lastUpdate]

    const data = headers.map((header, index) => (
        <div key={index}>
            <div className={styles.subheader}>{header}</div>
            <div className={styles.value}>{values[index]}</div>
        </div>
    ))
    return <div className={styles.tableContainer}>{data}</div>
}

/*
 * Versions
 */

interface VersionsProps {
    currentVersion: string
}
const Versions: FC<VersionsProps> = ({ currentVersion }) => (
    <div className={styles.versions}>
        <div>
            <div className={styles.title}>Affected Version</div>
            <div className={classNames(styles.number, styles.red)}>Unknown</div>
        </div>
        <div>
            <div className={styles.title}>Patch Version</div>
            <div className={classNames(styles.number, styles.green)}>{currentVersion}</div>
        </div>
    </div>
)

/*
 * Description
 */

interface DescriptionProps {
    description: string
}
const Description: FC<DescriptionProps> = ({ description }) => (
    <div className={styles.descriptionContainer}>
        <p>{description}</p>
    </div>
)
