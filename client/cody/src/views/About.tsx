import React from 'react';
import './App.css';
import { CodySvg, ResetSvg } from './utils/icons';
import {
  VSCodeButton,
  VSCodeLink,
  VSCodeProgressRing,
  VSCodeBadge,
} from '@vscode/webview-ui-toolkit/react';

export const Tips: React.FunctionComponent<React.PropsWithChildren> = () => (
  <div className="container-getting-started">
    <h3>Example questions</h3>
    <ul>
      <li>What are the most popular Go CLI libraries?</li>
      <li>Write a function that parses JSON in Python</li>
      <li>Summarize the code in this file.</li>
      <li>Which files handle SAML authentication in my codebase?</li>
    </ul>
    <h3>Recommendations</h3>
    <ul>
      <li>
        Visit the Recipes tab for special actions like Write a unit test or
        Summarize code history.
      </li>
      <li>
        Use the <code>reset</code> button in the upper right to reset the chat
        when you want to start a new line of thought. Cody does not remember
        anything outside the current chat.
      </li>
      <li>
        Use the feedback buttons when Cody messes up. We will use your feedback
        to make Cody better.
      </li>
      <li>
        Cody tells you which files it reads to respond to your message. If this
        list of files looks wrong, try copying the relevant code (up to 20KB)
        into your message like this:
      </li>
    </ul>
    <div className="code-block">
      <code className="code-block">
        <span>```</span>
        <span>
          {'{'}code{'}'}
        </span>
        <span>```</span>
        <span>Explain the code above (or whatever your question is).</span>
      </code>
    </div>
  </div>
);

interface HeaderProps {
  showResetBtn: boolean;
  onResetClick: () => void;
}

export const Header: React.FunctionComponent<
  React.PropsWithChildren<HeaderProps>
> = ({ showResetBtn, onResetClick }) => (
  <div id="container-ask" data-tab-target="ask">
    <div className="header-container">
      <div className="header-container-left">
        <div className="header-logo">
          <CodySvg />
        </div>
        <div className="header-title">
          Cody<VSCodeBadge>Beta</VSCodeBadge>
        </div>
      </div>
      <div className="header-container-right">
        <VSCodeButton
          className="reset-conversation"
          title="Start a new conversation with Cody"
          onClick={() => onResetClick()}
          appearance="icon"
          type="button"
        >
          {showResetBtn && <ResetSvg />}
        </VSCodeButton>
      </div>
    </div>
  </div>
);

export const About: React.FunctionComponent<React.PropsWithChildren> = () => (
  <div className="inner-container">
    <div className="non-transcript-container">
      <div className="container-getting-started">
        <Terms />
      </div>
    </div>
  </div>
);

interface TermsProps {
  setTermsAccepted?: (clicked: boolean) => void;
}

export const Terms: React.FunctionComponent<
  React.PropsWithChildren<TermsProps>
> = ({ setTermsAccepted }) => (
  <div className="non-transcript-container">
    <div className="terms-header-container">
      <VSCodeButton
        id="tab-menu-item-terms"
        className={'terms-container-header'}
        appearance="icon"
        disabled={true}
      >
        <p className="tab-menu-item-selected">Notice and Usage Policies</p>
      </VSCodeButton>
    </div>

    <div className="terms-container">
      <p>
        Sourcegraph Cody is an AI coding assistant that finds, explains, and
        writes code using context from your codebase.
      </p>
      <p>
        Accuracy: Cody uses context from your codebase to improve the accuracy
        of its responses compared to other AI-based tools. However, Sourcegraph
        does not guarantee the accuracy of Cody's answers.
      </p>
      <p>
        Ownership: Sourcegraph makes no claims of ownership over the code
        generated by Cody, nor does Sourcegraph claim ownership of the user's
        existing code. The user retains ownership of their code and
        responsibility for ensuring their code complies with software licenses
        and copyright law. Cody may make use of language models trained on large
        datasets of publicly available code. It is the user's responsibility to
        verify any code snippets emitted by Cody comply with existing software
        licenses and copyright law.
      </p>
      <p>
        Acceptable use: You must follow the acceptable use policies of the
        following LLM providers:{' '}
        <VSCodeLink href="https://www.anthropic.com/aup">
          Anthropic Acceptable Use Policy
        </VSCodeLink>
      </p>
    </div>

    <div className="terms-header-container">
      <VSCodeButton
        id="tab-menu-item-terms"
        className={'terms-container-header'}
        appearance="icon"
        disabled={true}
      >
        <p className="tab-menu-item-selected">Other FAQs</p>
      </VSCodeButton>
    </div>

    <div className="terms-container">
      <p>
        <em>
          Will my queries or Cody's responses to my queries be used as training
          data for any machine learning models?
        </em>
      </p>
      <p>
        <em>No.</em>
      </p>
      <p>
        <em>Will my queries to Cody be shared with any third parties?</em>
      </p>
      <p>
        Yes, we will send your queries to LLM providers we use for the sole
        purpose of providing you the service.
      </p>
      <p>
        <em>Will the LLMs use my Cody Q&A to train their models?</em>
      </p>
      <p>
        No, Sourcegraph has obtained commitments from our LLM providers that no
        Cody requests will be used to train LLM models.
      </p>
      <p>
        For Sourcegraph Cody security standards, data retention, and more
        information, see docs.sourcegraph.com/cody.
      </p>
    </div>
    {setTermsAccepted && (
      <VSCodeButton
        id="tab-menu-item-terms mt-5"
        className={'tab-menu-item-selected'}
        appearance="icon"
        type="button"
        onClick={() => setTermsAccepted(true)}
      >
        <p className="tab-menu-item-selected">I Accept</p>
      </VSCodeButton>
    )}
  </div>
);

export const LoadingPage: React.FunctionComponent<
  React.PropsWithChildren
> = () => (
  <div className="outer-container">
    <div className="inner-container">
      <div className="non-transcript-container">
        <div className="container-recipes">
          <VSCodeProgressRing />
        </div>
      </div>
    </div>
  </div>
);
