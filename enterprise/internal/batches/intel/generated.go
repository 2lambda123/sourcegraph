// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package intel

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// __getReferencesInput is used internally by genqlient
type __getReferencesInput struct {
	Repo      string `json:"repo"`
	Commit    string `json:"commit"`
	Path      string `json:"path"`
	Line      int    `json:"line"`
	Character int    `json:"character"`
}

// GetRepo returns __getReferencesInput.Repo, and is useful for accessing the field via an interface.
func (v *__getReferencesInput) GetRepo() string { return v.Repo }

// GetCommit returns __getReferencesInput.Commit, and is useful for accessing the field via an interface.
func (v *__getReferencesInput) GetCommit() string { return v.Commit }

// GetPath returns __getReferencesInput.Path, and is useful for accessing the field via an interface.
func (v *__getReferencesInput) GetPath() string { return v.Path }

// GetLine returns __getReferencesInput.Line, and is useful for accessing the field via an interface.
func (v *__getReferencesInput) GetLine() int { return v.Line }

// GetCharacter returns __getReferencesInput.Character, and is useful for accessing the field via an interface.
func (v *__getReferencesInput) GetCharacter() int { return v.Character }

// __pathExistsInput is used internally by genqlient
type __pathExistsInput struct {
	Repository string `json:"repository"`
	Commit     string `json:"commit"`
	Path       string `json:"path"`
}

// GetRepository returns __pathExistsInput.Repository, and is useful for accessing the field via an interface.
func (v *__pathExistsInput) GetRepository() string { return v.Repository }

// GetCommit returns __pathExistsInput.Commit, and is useful for accessing the field via an interface.
func (v *__pathExistsInput) GetCommit() string { return v.Commit }

// GetPath returns __pathExistsInput.Path, and is useful for accessing the field via an interface.
func (v *__pathExistsInput) GetPath() string { return v.Path }

// getReferencesRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository is a Git source control repository that is mirrored from some origin code host.
type getReferencesRepository struct {
	// Returns information about the given commit in the repository, or null if no commit exists with the given rev.
	Commit getReferencesRepositoryCommitGitCommit `json:"commit"`
}

// GetCommit returns getReferencesRepository.Commit, and is useful for accessing the field via an interface.
func (v *getReferencesRepository) GetCommit() getReferencesRepositoryCommitGitCommit { return v.Commit }

// getReferencesRepositoryCommitGitCommit includes the requested fields of the GraphQL type GitCommit.
// The GraphQL type's documentation follows.
//
// A Git commit.
type getReferencesRepositoryCommitGitCommit struct {
	// The Git blob in this commit at the given path.
	Blob getReferencesRepositoryCommitGitCommitBlobGitBlob `json:"blob"`
}

// GetBlob returns getReferencesRepositoryCommitGitCommit.Blob, and is useful for accessing the field via an interface.
func (v *getReferencesRepositoryCommitGitCommit) GetBlob() getReferencesRepositoryCommitGitCommitBlobGitBlob {
	return v.Blob
}

// getReferencesRepositoryCommitGitCommitBlobGitBlob includes the requested fields of the GraphQL type GitBlob.
// The GraphQL type's documentation follows.
//
// A Git blob in a repository.
type getReferencesRepositoryCommitGitCommitBlobGitBlob struct {
	// A wrapper around LSIF query methods. If no LSIF upload can be used to answer code
	// intelligence queries for this path-at-revision, this resolves to null.
	Lsif getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFData `json:"lsif"`
}

// GetLsif returns getReferencesRepositoryCommitGitCommitBlobGitBlob.Lsif, and is useful for accessing the field via an interface.
func (v *getReferencesRepositoryCommitGitCommitBlobGitBlob) GetLsif() getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFData {
	return v.Lsif
}

// getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFData includes the requested fields of the GraphQL type GitBlobLSIFData.
// The GraphQL type's documentation follows.
//
// A wrapper object around LSIF query methods for a particular git-blob-at-revision. When this node is
// null, no LSIF data is available for the git blob in question.
type getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFData struct {
	// A list of references of the symbol under the given document position.
	References getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnection `json:"references"`
}

// GetReferences returns getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFData.References, and is useful for accessing the field via an interface.
func (v *getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFData) GetReferences() getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnection {
	return v.References
}

// getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnection includes the requested fields of the GraphQL type LocationConnection.
// The GraphQL type's documentation follows.
//
// A list of locations within a file.
type getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnection struct {
	// A list of locations within a file.
	Nodes []getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocation `json:"nodes"`
}

// GetNodes returns getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnection) GetNodes() []getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocation {
	return v.Nodes
}

// getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocation includes the requested fields of the GraphQL type Location.
// The GraphQL type's documentation follows.
//
// A location inside a resource (in a repository at a specific commit).
type getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocation struct {
	// The file that this location refers to.
	Resource getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlob `json:"resource"`
	// The range inside the file that this location refers to.
	Range getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRange `json:"range"`
}

// GetResource returns getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocation.Resource, and is useful for accessing the field via an interface.
func (v *getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocation) GetResource() getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlob {
	return v.Resource
}

// GetRange returns getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocation.Range, and is useful for accessing the field via an interface.
func (v *getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocation) GetRange() getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRange {
	return v.Range
}

// getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRange includes the requested fields of the GraphQL type Range.
// The GraphQL type's documentation follows.
//
// A range inside a file. The start position is inclusive, and the end position is exclusive.
type getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRange struct {
	// The start position of the range (inclusive).
	Start getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRangeStartPosition `json:"start"`
	// The end position of the range (exclusive).
	End getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRangeEndPosition `json:"end"`
}

// GetStart returns getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRange.Start, and is useful for accessing the field via an interface.
func (v *getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRange) GetStart() getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRangeStartPosition {
	return v.Start
}

// GetEnd returns getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRange.End, and is useful for accessing the field via an interface.
func (v *getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRange) GetEnd() getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRangeEndPosition {
	return v.End
}

// getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRangeEndPosition includes the requested fields of the GraphQL type Position.
// The GraphQL type's documentation follows.
//
// A zero-based position inside a file.
type getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRangeEndPosition struct {
	// The line number (zero-based) of the position.
	Line int `json:"line"`
	// The character offset (zero-based) in the line of the position.
	Character int `json:"character"`
}

// GetLine returns getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRangeEndPosition.Line, and is useful for accessing the field via an interface.
func (v *getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRangeEndPosition) GetLine() int {
	return v.Line
}

// GetCharacter returns getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRangeEndPosition.Character, and is useful for accessing the field via an interface.
func (v *getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRangeEndPosition) GetCharacter() int {
	return v.Character
}

// getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRangeStartPosition includes the requested fields of the GraphQL type Position.
// The GraphQL type's documentation follows.
//
// A zero-based position inside a file.
type getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRangeStartPosition struct {
	// The line number (zero-based) of the position.
	Line int `json:"line"`
	// The character offset (zero-based) in the line of the position.
	Character int `json:"character"`
}

// GetLine returns getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRangeStartPosition.Line, and is useful for accessing the field via an interface.
func (v *getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRangeStartPosition) GetLine() int {
	return v.Line
}

// GetCharacter returns getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRangeStartPosition.Character, and is useful for accessing the field via an interface.
func (v *getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationRangeStartPosition) GetCharacter() int {
	return v.Character
}

// getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlob includes the requested fields of the GraphQL type CodeIntelGitBlob.
// The GraphQL type's documentation follows.
//
// A gitblob resolver specific to code intel.
type getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlob struct {
	// The Git commit containing this tree.
	Commit getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlobCommitCodeIntelCommit `json:"commit"`
	// The full path (relative to the root) of this tree.
	Path string `json:"path"`
	// The repository containing this tree.
	Repository getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlobRepositoryCodeIntelRepository `json:"repository"`
}

// GetCommit returns getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlob.Commit, and is useful for accessing the field via an interface.
func (v *getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlob) GetCommit() getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlobCommitCodeIntelCommit {
	return v.Commit
}

// GetPath returns getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlob.Path, and is useful for accessing the field via an interface.
func (v *getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlob) GetPath() string {
	return v.Path
}

// GetRepository returns getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlob.Repository, and is useful for accessing the field via an interface.
func (v *getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlob) GetRepository() getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlobRepositoryCodeIntelRepository {
	return v.Repository
}

// getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlobCommitCodeIntelCommit includes the requested fields of the GraphQL type CodeIntelCommit.
// The GraphQL type's documentation follows.
//
// A Code Intel Commit.
type getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlobCommitCodeIntelCommit struct {
	// This commit's Git object ID (OID), a 40-character SHA-1 hash.
	Oid string `json:"oid"`
}

// GetOid returns getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlobCommitCodeIntelCommit.Oid, and is useful for accessing the field via an interface.
func (v *getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlobCommitCodeIntelCommit) GetOid() string {
	return v.Oid
}

// getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlobRepositoryCodeIntelRepository includes the requested fields of the GraphQL type CodeIntelRepository.
// The GraphQL type's documentation follows.
//
// A codeintel repository is a Git source control repository that is mirrored from some origin code host and it is specific to code intel.
type getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlobRepositoryCodeIntelRepository struct {
	// The repository's name, as a path with one or more components. It conventionally consists of
	// the repository's hostname and path (joined by "/"), minus any suffixes (such as ".git").
	// Examples:
	// - github.com/foo/bar
	// - my-code-host.example.com/myrepo
	// - myrepo
	Name string `json:"name"`
}

// GetName returns getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlobRepositoryCodeIntelRepository.Name, and is useful for accessing the field via an interface.
func (v *getReferencesRepositoryCommitGitCommitBlobGitBlobLsifGitBlobLSIFDataReferencesLocationConnectionNodesLocationResourceCodeIntelGitBlobRepositoryCodeIntelRepository) GetName() string {
	return v.Name
}

// getReferencesResponse is returned by getReferences on success.
type getReferencesResponse struct {
	// Looks up a repository by either name or cloneURL.
	Repository getReferencesRepository `json:"repository"`
}

// GetRepository returns getReferencesResponse.Repository, and is useful for accessing the field via an interface.
func (v *getReferencesResponse) GetRepository() getReferencesRepository { return v.Repository }

// pathExistsRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository is a Git source control repository that is mirrored from some origin code host.
type pathExistsRepository struct {
	// Returns information about the given commit in the repository, or null if no commit exists with the given rev.
	Commit pathExistsRepositoryCommitGitCommit `json:"commit"`
}

// GetCommit returns pathExistsRepository.Commit, and is useful for accessing the field via an interface.
func (v *pathExistsRepository) GetCommit() pathExistsRepositoryCommitGitCommit { return v.Commit }

// pathExistsRepositoryCommitGitCommit includes the requested fields of the GraphQL type GitCommit.
// The GraphQL type's documentation follows.
//
// A Git commit.
type pathExistsRepositoryCommitGitCommit struct {
	// The Git tree or blob in this commit at the given path.
	Path pathExistsRepositoryCommitGitCommitPathGitTreeOrBlob `json:"-"`
}

// GetPath returns pathExistsRepositoryCommitGitCommit.Path, and is useful for accessing the field via an interface.
func (v *pathExistsRepositoryCommitGitCommit) GetPath() pathExistsRepositoryCommitGitCommitPathGitTreeOrBlob {
	return v.Path
}

func (v *pathExistsRepositoryCommitGitCommit) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*pathExistsRepositoryCommitGitCommit
		Path json.RawMessage `json:"path"`
		graphql.NoUnmarshalJSON
	}
	firstPass.pathExistsRepositoryCommitGitCommit = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Path
		src := firstPass.Path
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalpathExistsRepositoryCommitGitCommitPathGitTreeOrBlob(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal pathExistsRepositoryCommitGitCommit.Path: %w", err)
			}
		}
	}
	return nil
}

type __premarshalpathExistsRepositoryCommitGitCommit struct {
	Path json.RawMessage `json:"path"`
}

func (v *pathExistsRepositoryCommitGitCommit) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *pathExistsRepositoryCommitGitCommit) __premarshalJSON() (*__premarshalpathExistsRepositoryCommitGitCommit, error) {
	var retval __premarshalpathExistsRepositoryCommitGitCommit

	{

		dst := &retval.Path
		src := v.Path
		var err error
		*dst, err = __marshalpathExistsRepositoryCommitGitCommitPathGitTreeOrBlob(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal pathExistsRepositoryCommitGitCommit.Path: %w", err)
		}
	}
	return &retval, nil
}

// pathExistsRepositoryCommitGitCommitPathGitBlob includes the requested fields of the GraphQL type GitBlob.
// The GraphQL type's documentation follows.
//
// A Git blob in a repository.
type pathExistsRepositoryCommitGitCommitPathGitBlob struct {
	Typename string `json:"__typename"`
	// False because this is a blob (file), not a directory.
	IsDirectory bool `json:"isDirectory"`
}

// GetTypename returns pathExistsRepositoryCommitGitCommitPathGitBlob.Typename, and is useful for accessing the field via an interface.
func (v *pathExistsRepositoryCommitGitCommitPathGitBlob) GetTypename() string { return v.Typename }

// GetIsDirectory returns pathExistsRepositoryCommitGitCommitPathGitBlob.IsDirectory, and is useful for accessing the field via an interface.
func (v *pathExistsRepositoryCommitGitCommitPathGitBlob) GetIsDirectory() bool { return v.IsDirectory }

// pathExistsRepositoryCommitGitCommitPathGitTree includes the requested fields of the GraphQL type GitTree.
// The GraphQL type's documentation follows.
//
// A Git tree in a repository.
type pathExistsRepositoryCommitGitCommitPathGitTree struct {
	Typename string `json:"__typename"`
	// True because this is a directory. (The value differs for other TreeEntry interface implementations, such as
	// File.)
	IsDirectory bool `json:"isDirectory"`
}

// GetTypename returns pathExistsRepositoryCommitGitCommitPathGitTree.Typename, and is useful for accessing the field via an interface.
func (v *pathExistsRepositoryCommitGitCommitPathGitTree) GetTypename() string { return v.Typename }

// GetIsDirectory returns pathExistsRepositoryCommitGitCommitPathGitTree.IsDirectory, and is useful for accessing the field via an interface.
func (v *pathExistsRepositoryCommitGitCommitPathGitTree) GetIsDirectory() bool { return v.IsDirectory }

// pathExistsRepositoryCommitGitCommitPathGitTreeOrBlob includes the requested fields of the GraphQL interface GitTreeOrBlob.
//
// pathExistsRepositoryCommitGitCommitPathGitTreeOrBlob is implemented by the following types:
// pathExistsRepositoryCommitGitCommitPathGitTree
// pathExistsRepositoryCommitGitCommitPathGitBlob
// The GraphQL type's documentation follows.
//
// Either a git tree or blob.
type pathExistsRepositoryCommitGitCommitPathGitTreeOrBlob interface {
	implementsGraphQLInterfacepathExistsRepositoryCommitGitCommitPathGitTreeOrBlob()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *pathExistsRepositoryCommitGitCommitPathGitTree) implementsGraphQLInterfacepathExistsRepositoryCommitGitCommitPathGitTreeOrBlob() {
}
func (v *pathExistsRepositoryCommitGitCommitPathGitBlob) implementsGraphQLInterfacepathExistsRepositoryCommitGitCommitPathGitTreeOrBlob() {
}

func __unmarshalpathExistsRepositoryCommitGitCommitPathGitTreeOrBlob(b []byte, v *pathExistsRepositoryCommitGitCommitPathGitTreeOrBlob) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "GitTree":
		*v = new(pathExistsRepositoryCommitGitCommitPathGitTree)
		return json.Unmarshal(b, *v)
	case "GitBlob":
		*v = new(pathExistsRepositoryCommitGitCommitPathGitBlob)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing GitTreeOrBlob.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for pathExistsRepositoryCommitGitCommitPathGitTreeOrBlob: "%v"`, tn.TypeName)
	}
}

func __marshalpathExistsRepositoryCommitGitCommitPathGitTreeOrBlob(v *pathExistsRepositoryCommitGitCommitPathGitTreeOrBlob) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *pathExistsRepositoryCommitGitCommitPathGitTree:
		typename = "GitTree"

		result := struct {
			TypeName string `json:"__typename"`
			*pathExistsRepositoryCommitGitCommitPathGitTree
		}{typename, v}
		return json.Marshal(result)
	case *pathExistsRepositoryCommitGitCommitPathGitBlob:
		typename = "GitBlob"

		result := struct {
			TypeName string `json:"__typename"`
			*pathExistsRepositoryCommitGitCommitPathGitBlob
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for pathExistsRepositoryCommitGitCommitPathGitTreeOrBlob: "%T"`, v)
	}
}

// pathExistsResponse is returned by pathExists on success.
type pathExistsResponse struct {
	// Looks up a repository by either name or cloneURL.
	Repository pathExistsRepository `json:"repository"`
}

// GetRepository returns pathExistsResponse.Repository, and is useful for accessing the field via an interface.
func (v *pathExistsResponse) GetRepository() pathExistsRepository { return v.Repository }

func getReferences(
	ctx context.Context,
	client graphql.Client,
	repo string,
	commit string,
	path string,
	line int,
	character int,
) (*getReferencesResponse, error) {
	req := &graphql.Request{
		OpName: "getReferences",
		Query: `
query getReferences ($repo: String!, $commit: String!, $path: String!, $line: Int!, $character: Int!) {
	repository(name: $repo) {
		commit(rev: $commit) {
			blob(path: $path) {
				lsif {
					references(line: $line, character: $character) {
						nodes {
							resource {
								commit {
									oid
								}
								path
								repository {
									name
								}
							}
							range {
								start {
									line
									character
								}
								end {
									line
									character
								}
							}
						}
					}
				}
			}
		}
	}
}
`,
		Variables: &__getReferencesInput{
			Repo:      repo,
			Commit:    commit,
			Path:      path,
			Line:      line,
			Character: character,
		},
	}
	var err error

	var data getReferencesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func pathExists(
	ctx context.Context,
	client graphql.Client,
	repository string,
	commit string,
	path string,
) (*pathExistsResponse, error) {
	req := &graphql.Request{
		OpName: "pathExists",
		Query: `
query pathExists ($repository: String!, $commit: String!, $path: String!) {
	repository(name: $repository) {
		commit(rev: $commit) {
			path(path: $path) {
				__typename
				... on GitTree {
					isDirectory
				}
				... on GitBlob {
					isDirectory
				}
			}
		}
	}
}
`,
		Variables: &__pathExistsInput{
			Repository: repository,
			Commit:     commit,
			Path:       path,
		},
	}
	var err error

	var data pathExistsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
