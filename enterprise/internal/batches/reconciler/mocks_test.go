// Code generated by go-mockgen 1.3.3; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package reconciler

import (
	"context"
	"sync"

	api "github.com/sourcegraph/sourcegraph/internal/api"
)

// MockEnqueueChangesetSyncsForRepo is a mock implementation of the
// enqueueChangesetSyncsForRepo interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/batches/reconciler)
// used for unit testing.
type MockEnqueueChangesetSyncsForRepo struct {
	// EnqueueChangesetSyncsForRepoFunc is an instance of a mock function
	// object controlling the behavior of the method
	// EnqueueChangesetSyncsForRepo.
	EnqueueChangesetSyncsForRepoFunc *EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFunc
}

// NewMockEnqueueChangesetSyncsForRepo creates a new mock of the
// enqueueChangesetSyncsForRepo interface. All methods return zero values
// for all results, unless overwritten.
func NewMockEnqueueChangesetSyncsForRepo() *MockEnqueueChangesetSyncsForRepo {
	return &MockEnqueueChangesetSyncsForRepo{
		EnqueueChangesetSyncsForRepoFunc: &EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockEnqueueChangesetSyncsForRepo creates a new mock of the
// enqueueChangesetSyncsForRepo interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockEnqueueChangesetSyncsForRepo() *MockEnqueueChangesetSyncsForRepo {
	return &MockEnqueueChangesetSyncsForRepo{
		EnqueueChangesetSyncsForRepoFunc: &EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFunc{
			defaultHook: func(context.Context, api.RepoID) error {
				panic("unexpected invocation of MockEnqueueChangesetSyncsForRepo.EnqueueChangesetSyncsForRepo")
			},
		},
	}
}

// surrogateMockEnqueueChangesetSyncsForRepo is a copy of the
// enqueueChangesetSyncsForRepo interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/batches/reconciler).
// It is redefined here as it is unexported in the source package.
type surrogateMockEnqueueChangesetSyncsForRepo interface {
	EnqueueChangesetSyncsForRepo(context.Context, api.RepoID) error
}

// NewMockEnqueueChangesetSyncsForRepoFrom creates a new mock of the
// MockEnqueueChangesetSyncsForRepo interface. All methods delegate to the
// given implementation, unless overwritten.
func NewMockEnqueueChangesetSyncsForRepoFrom(i surrogateMockEnqueueChangesetSyncsForRepo) *MockEnqueueChangesetSyncsForRepo {
	return &MockEnqueueChangesetSyncsForRepo{
		EnqueueChangesetSyncsForRepoFunc: &EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFunc{
			defaultHook: i.EnqueueChangesetSyncsForRepo,
		},
	}
}

// EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFunc describes
// the behavior when the EnqueueChangesetSyncsForRepo method of the parent
// MockEnqueueChangesetSyncsForRepo instance is invoked.
type EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFunc struct {
	defaultHook func(context.Context, api.RepoID) error
	hooks       []func(context.Context, api.RepoID) error
	history     []EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFuncCall
	mutex       sync.Mutex
}

// EnqueueChangesetSyncsForRepo delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEnqueueChangesetSyncsForRepo) EnqueueChangesetSyncsForRepo(v0 context.Context, v1 api.RepoID) error {
	r0 := m.EnqueueChangesetSyncsForRepoFunc.nextHook()(v0, v1)
	m.EnqueueChangesetSyncsForRepoFunc.appendCall(EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// EnqueueChangesetSyncsForRepo method of the parent
// MockEnqueueChangesetSyncsForRepo instance is invoked and the hook queue
// is empty.
func (f *EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFunc) SetDefaultHook(hook func(context.Context, api.RepoID) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EnqueueChangesetSyncsForRepo method of the parent
// MockEnqueueChangesetSyncsForRepo instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFunc) PushHook(hook func(context.Context, api.RepoID) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoID) error {
		return r0
	})
}

func (f *EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFunc) nextHook() func(context.Context, api.RepoID) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFunc) appendCall(r0 EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFuncCall objects
// describing the invocations of this function.
func (f *EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFunc) History() []EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFuncCall {
	f.mutex.Lock()
	history := make([]EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFuncCall is an
// object that describes an invocation of method
// EnqueueChangesetSyncsForRepo on an instance of
// MockEnqueueChangesetSyncsForRepo.
type EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnqueueChangesetSyncsForRepoEnqueueChangesetSyncsForRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
