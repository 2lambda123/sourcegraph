package embed

import (
	"strings"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestExcludingFilePaths(t *testing.T) {
	files := []string{
		"file.sql",
		"root/file.yaml",
		"client/web/struct.json",
		"vendor/vendor.txt",
		"cool.go",
		"node_modules/a.go",
		"Dockerfile",
		"README.md",
		"vendor/README.md",
		"LICENSE.txt",
		"nested/vendor/file.py",
	}

	expectedFiles := []string{"cool.go", "Dockerfile", "README.md", "LICENSE.txt"}
	gotFiles := []string{}

	excludedGlobPatterns := GetDefaultExcludedFilePathPatterns()
	for _, file := range files {
		if !IsExcludedFilePath(file, excludedGlobPatterns) {
			gotFiles = append(gotFiles, file)
		}
	}

	require.Equal(t, expectedFiles, gotFiles)
}

func TestIsEmbeddableFileContent(t *testing.T) {
	testCases := []struct {
		name     string
		content  string
		expected bool
	}{
		{
			name:     "embeddable content",
			content:  "This is a simple text file longer than 32 characters.",
			expected: true,
		},
		{
			name:     "too short content",
			content:  "This is a short text file.",
			expected: false,
		},
		{
			name:     "not embeddable due to autogenerated header",
			content:  "// Code generated by test\nThis is a simple text file.",
			expected: false,
		},
		{
			name:     "not embeddable due to long line",
			content:  strings.Repeat("a", MAX_LINE_LENGTH+1) + "\nThis is a simple text file.",
			expected: false,
		},
		{
			name:     "empty content",
			content:  "",
			expected: false,
		},
		{
			name:     "whitespace only content",
			content:  "   \n\t  \n",
			expected: false,
		},
		{
			name:     "autogenerated header after 5 lines",
			content:  "Line1\nLine2\nLine3\nLine4\nLine5\n// Code generated by test",
			expected: true,
		},
		{
			name:     "multiple autogenerated headers",
			content:  "// DO NOT EDIT\n// Code generated by test\nThis is a simple text file.",
			expected: false,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			actual := IsEmbeddableFileContent(tc.content)
			if actual != tc.expected {
				t.Errorf("Expected %v, but got %v", tc.expected, actual)
			}
		})
	}
}
