
extend type Query {
    newInsights(
        id: ID
        first: Int
        after: String
        filters: NewInsightViewFiltersInput
    ): NewInsightConnection
}


type NewInsightConnection {
    nodes: [BaseInsight!]!
    totalCount: Int!
    pageInfo: PageInfo!
}

# ---------- Base Insight types ----------- #
interface BaseInsight {
    id: ID!
    # title and all other shared across all insight fields
    title: String!
    isFrozen: Boolean!
    filters: NewInsightFilters
    dashboards(id: ID, first: Int, after: String): InsightsDashboardConnection

    # Insight-define information
    configuration: BaseInsightConfiguration!
}

type NewInsightFilters {
    includeRepoRegex: String
    excludeRepoRegex: String
    searchContexts: SearchContextConnection
}

union BaseInsightConfiguration =
    SearchBasedInsightConfiguration |
    CaptureGroupInsightConfiguration |
    LangStatsInsightConfiguration

# These two (SeriesLikeInsight and CategoricalLikeInsight) are
# kind of synthetic interfaces that we introduce in order to
# simplify data querying in consumers.
#
# See client/web/src/enterprise/insights/new-insights-gql-examples.ts
interface SeriesLikeInsight {
    series: [NewInsightSeries!]!
}

interface CategoricalLikeInsight {
    data: [NewInsightCategoricalDatum!]!
}

# --------- Insight configurations  ------------ #
type SearchBasedInsightConfiguration implements SeriesLikeInsight {
    # All important to the edit UI (insight configurations) for Search-Based
    # insight fields are contained inside of series.
    series: [NewInsightSeries!]!
}

type CaptureGroupInsightConfiguration implements SeriesLikeInsight {
    # In Capture Group insight there is no a performant way to get
    # insight configuration from series because series here are generated
    # so we have to extract vital settings from the series.
    query: String!
    repositories: [String!]!
    timeScope: InsightTimeScope!
    series: [NewInsightSeries!]!
}

type LangStatsInsightConfiguration implements CategoricalLikeInsight {
    # Since Lang Stats insight as any other insights doesn't have series
    # we provide setting data on the top level.
    repositories: [String!]!
    otherThreshold: Float!
    chartType: CategoricalLikeChartTYpe
    data: [NewInsightCategoricalDatum!]!
}

# --------- Series-like data types -------------- #
type SeriesLikeInsightData {
    series: [NewInsightSeries!]!
}

type NewInsightSeries implements Node {
    id: ID!
    title: String!
    query: String!

    visualSettings: NewInsightSeriesVisualSettings!
    repositoryScope: InsightRepositoryScope!
    timeScope: InsightTimeScope!
    # this is true when series generated on the backend in query time
    # Capture group insight case
    isGenerated: Boolean!
    status: NewInsightSeriesStatus
    points(from: DateTime, to: DateTime): [NewInsightDataPoint!]!
}

type NewInsightSeriesVisualSettings {
    color: String!
    pattern: String
    chartType: SeriesLikeChartType
    border: String!
    # ... any other visual settings here, as we found out chart type
    # doesn't change set of settings for the series, the only that can
    # change visual settings is data shape and for all series data shape
    # is series-like (thought time)
}

enum SeriesLikeChartType {
    LINE
    BAR
}

type NewInsightDataPoint {
    dateTime: DateTime!
    value: Float!
}

type NewInsightSeriesStatus {
    totalPoints: Int!
    pendingJobs: Int!
    completedJobs: Int!
    failedJobs: Int!
    backfillQueuedAt: DateTime
}

# ----------- Categorical like data ------------ #
type NewInsightCategoricalDatum {
    value: Float!
    title: String!
    color: String!
    link: String!
}

enum CategoricalLikeChartTYpe {
    PIE
    BAR
    SCATTERPLOT
    BUBBLE
}


# ----------- Insight mutations ------------- #
extend type Mutation {
    createSearchInsight(input: SearchInsightInput): BaseInsight
    createCaptureGroupInsight(input: CaptureGroupInsightInput): BaseInsight
    createLangStatsInsight(input: LangStatsInsightInput): BaseInsight

    updateSearchBasedInsight(input: SearchInsightInput): BaseInsight
    updateCaptureGroupInsight(input: CaptureGroupInsightInput): BaseInsight
    updateLangStatsInsight(input: LangStatsInsightInput): BaseInsight

    deleteInsight(id: ID!): EmptyResponse!
}

# ----------- Search based insight input types ---------- #
input SearchInsightInput {
    title: String!
    dashboards: [ID!]
    filters: NewInsightViewFiltersInput!
    series: [SearchInsightSeriesInput!]!
}

input SearchInsightSeriesInput {
    id: ID
    query: String!
    title: String!
    color: String!
    chartType: SeriesLikeChartType
    repositoryScope: RepositoryScopeInput!
    timeScope: TimeScopeInput!
}

# ----------- Capture group insight input types ---------- #
input CaptureGroupInsightInput {
    title: String!
    dashboards: [ID!]
    filters: NewInsightViewFiltersInput!
    query: String!
    chartType: SeriesLikeChartType
    repositoryScope: RepositoryScopeInput!
    timeScope: TimeScopeInput!
}

# ------------ LangStats insight input types ------------ #
input LangStatsInsightInput {
    title: String!
    otherThreshold: Float!
    chartType: CategoricalLikeChartTYpe
    repositoryScope: RepositoryScopeInput!
    dashboards: [ID!]
    filters: NewInsightViewFiltersInput!
}

input NewInsightViewFiltersInput {
    includeRepoRegex: String
    excludeRepoRegex: String
    searchContexts: [ID!]
}
