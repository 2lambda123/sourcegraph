// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package repoupdater

import (
	"context"
	"sync"

	api "github.com/sourcegraph/sourcegraph/internal/api"
	protocol "github.com/sourcegraph/sourcegraph/internal/repoupdater/protocol"
)

// MockClient is a mock implementation of the Client interface (from the
// package github.com/sourcegraph/sourcegraph/internal/repoupdater) used for
// unit testing.
type MockClient struct {
	// EnqueueChangesetSyncFunc is an instance of a mock function object
	// controlling the behavior of the method EnqueueChangesetSync.
	EnqueueChangesetSyncFunc *ClientEnqueueChangesetSyncFunc
	// EnqueueRepoUpdateFunc is an instance of a mock function object
	// controlling the behavior of the method EnqueueRepoUpdate.
	EnqueueRepoUpdateFunc *ClientEnqueueRepoUpdateFunc
	// RepoLookupFunc is an instance of a mock function object controlling
	// the behavior of the method RepoLookup.
	RepoLookupFunc *ClientRepoLookupFunc
	// RepoUpdateSchedulerInfoFunc is an instance of a mock function object
	// controlling the behavior of the method RepoUpdateSchedulerInfo.
	RepoUpdateSchedulerInfoFunc *ClientRepoUpdateSchedulerInfoFunc
	// SchedulePermsSyncFunc is an instance of a mock function object
	// controlling the behavior of the method SchedulePermsSync.
	SchedulePermsSyncFunc *ClientSchedulePermsSyncFunc
	// SyncExternalServiceFunc is an instance of a mock function object
	// controlling the behavior of the method SyncExternalService.
	SyncExternalServiceFunc *ClientSyncExternalServiceFunc
}

// NewMockClient creates a new mock of the Client interface. All methods
// return zero values for all results, unless overwritten.
func NewMockClient() *MockClient {
	return &MockClient{
		EnqueueChangesetSyncFunc: &ClientEnqueueChangesetSyncFunc{
			defaultHook: func(context.Context, []int64) (r0 error) {
				return
			},
		},
		EnqueueRepoUpdateFunc: &ClientEnqueueRepoUpdateFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 *protocol.RepoUpdateResponse, r1 error) {
				return
			},
		},
		RepoLookupFunc: &ClientRepoLookupFunc{
			defaultHook: func(context.Context, protocol.RepoLookupArgs) (r0 *protocol.RepoLookupResult, r1 error) {
				return
			},
		},
		RepoUpdateSchedulerInfoFunc: &ClientRepoUpdateSchedulerInfoFunc{
			defaultHook: func(context.Context, protocol.RepoUpdateSchedulerInfoArgs) (r0 *protocol.RepoUpdateSchedulerInfoResult, r1 error) {
				return
			},
		},
		SchedulePermsSyncFunc: &ClientSchedulePermsSyncFunc{
			defaultHook: func(context.Context, protocol.PermsSyncRequest) (r0 error) {
				return
			},
		},
		SyncExternalServiceFunc: &ClientSyncExternalServiceFunc{
			defaultHook: func(context.Context, int64) (r0 *protocol.ExternalServiceSyncResult, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockClient creates a new mock of the Client interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockClient() *MockClient {
	return &MockClient{
		EnqueueChangesetSyncFunc: &ClientEnqueueChangesetSyncFunc{
			defaultHook: func(context.Context, []int64) error {
				panic("unexpected invocation of MockClient.EnqueueChangesetSync")
			},
		},
		EnqueueRepoUpdateFunc: &ClientEnqueueRepoUpdateFunc{
			defaultHook: func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error) {
				panic("unexpected invocation of MockClient.EnqueueRepoUpdate")
			},
		},
		RepoLookupFunc: &ClientRepoLookupFunc{
			defaultHook: func(context.Context, protocol.RepoLookupArgs) (*protocol.RepoLookupResult, error) {
				panic("unexpected invocation of MockClient.RepoLookup")
			},
		},
		RepoUpdateSchedulerInfoFunc: &ClientRepoUpdateSchedulerInfoFunc{
			defaultHook: func(context.Context, protocol.RepoUpdateSchedulerInfoArgs) (*protocol.RepoUpdateSchedulerInfoResult, error) {
				panic("unexpected invocation of MockClient.RepoUpdateSchedulerInfo")
			},
		},
		SchedulePermsSyncFunc: &ClientSchedulePermsSyncFunc{
			defaultHook: func(context.Context, protocol.PermsSyncRequest) error {
				panic("unexpected invocation of MockClient.SchedulePermsSync")
			},
		},
		SyncExternalServiceFunc: &ClientSyncExternalServiceFunc{
			defaultHook: func(context.Context, int64) (*protocol.ExternalServiceSyncResult, error) {
				panic("unexpected invocation of MockClient.SyncExternalService")
			},
		},
	}
}

// NewMockClientFrom creates a new mock of the MockClient interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockClientFrom(i Client) *MockClient {
	return &MockClient{
		EnqueueChangesetSyncFunc: &ClientEnqueueChangesetSyncFunc{
			defaultHook: i.EnqueueChangesetSync,
		},
		EnqueueRepoUpdateFunc: &ClientEnqueueRepoUpdateFunc{
			defaultHook: i.EnqueueRepoUpdate,
		},
		RepoLookupFunc: &ClientRepoLookupFunc{
			defaultHook: i.RepoLookup,
		},
		RepoUpdateSchedulerInfoFunc: &ClientRepoUpdateSchedulerInfoFunc{
			defaultHook: i.RepoUpdateSchedulerInfo,
		},
		SchedulePermsSyncFunc: &ClientSchedulePermsSyncFunc{
			defaultHook: i.SchedulePermsSync,
		},
		SyncExternalServiceFunc: &ClientSyncExternalServiceFunc{
			defaultHook: i.SyncExternalService,
		},
	}
}

// ClientEnqueueChangesetSyncFunc describes the behavior when the
// EnqueueChangesetSync method of the parent MockClient instance is invoked.
type ClientEnqueueChangesetSyncFunc struct {
	defaultHook func(context.Context, []int64) error
	hooks       []func(context.Context, []int64) error
	history     []ClientEnqueueChangesetSyncFuncCall
	mutex       sync.Mutex
}

// EnqueueChangesetSync delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) EnqueueChangesetSync(v0 context.Context, v1 []int64) error {
	r0 := m.EnqueueChangesetSyncFunc.nextHook()(v0, v1)
	m.EnqueueChangesetSyncFunc.appendCall(ClientEnqueueChangesetSyncFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the EnqueueChangesetSync
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientEnqueueChangesetSyncFunc) SetDefaultHook(hook func(context.Context, []int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EnqueueChangesetSync method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientEnqueueChangesetSyncFunc) PushHook(hook func(context.Context, []int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientEnqueueChangesetSyncFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientEnqueueChangesetSyncFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []int64) error {
		return r0
	})
}

func (f *ClientEnqueueChangesetSyncFunc) nextHook() func(context.Context, []int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientEnqueueChangesetSyncFunc) appendCall(r0 ClientEnqueueChangesetSyncFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientEnqueueChangesetSyncFuncCall objects
// describing the invocations of this function.
func (f *ClientEnqueueChangesetSyncFunc) History() []ClientEnqueueChangesetSyncFuncCall {
	f.mutex.Lock()
	history := make([]ClientEnqueueChangesetSyncFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientEnqueueChangesetSyncFuncCall is an object that describes an
// invocation of method EnqueueChangesetSync on an instance of MockClient.
type ClientEnqueueChangesetSyncFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientEnqueueChangesetSyncFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientEnqueueChangesetSyncFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientEnqueueRepoUpdateFunc describes the behavior when the
// EnqueueRepoUpdate method of the parent MockClient instance is invoked.
type ClientEnqueueRepoUpdateFunc struct {
	defaultHook func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error)
	hooks       []func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error)
	history     []ClientEnqueueRepoUpdateFuncCall
	mutex       sync.Mutex
}

// EnqueueRepoUpdate delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) EnqueueRepoUpdate(v0 context.Context, v1 api.RepoName) (*protocol.RepoUpdateResponse, error) {
	r0, r1 := m.EnqueueRepoUpdateFunc.nextHook()(v0, v1)
	m.EnqueueRepoUpdateFunc.appendCall(ClientEnqueueRepoUpdateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the EnqueueRepoUpdate
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientEnqueueRepoUpdateFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EnqueueRepoUpdate method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientEnqueueRepoUpdateFunc) PushHook(hook func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientEnqueueRepoUpdateFunc) SetDefaultReturn(r0 *protocol.RepoUpdateResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientEnqueueRepoUpdateFunc) PushReturn(r0 *protocol.RepoUpdateResponse, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error) {
		return r0, r1
	})
}

func (f *ClientEnqueueRepoUpdateFunc) nextHook() func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientEnqueueRepoUpdateFunc) appendCall(r0 ClientEnqueueRepoUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientEnqueueRepoUpdateFuncCall objects
// describing the invocations of this function.
func (f *ClientEnqueueRepoUpdateFunc) History() []ClientEnqueueRepoUpdateFuncCall {
	f.mutex.Lock()
	history := make([]ClientEnqueueRepoUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientEnqueueRepoUpdateFuncCall is an object that describes an invocation
// of method EnqueueRepoUpdate on an instance of MockClient.
type ClientEnqueueRepoUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.RepoUpdateResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientEnqueueRepoUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientEnqueueRepoUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientRepoLookupFunc describes the behavior when the RepoLookup method of
// the parent MockClient instance is invoked.
type ClientRepoLookupFunc struct {
	defaultHook func(context.Context, protocol.RepoLookupArgs) (*protocol.RepoLookupResult, error)
	hooks       []func(context.Context, protocol.RepoLookupArgs) (*protocol.RepoLookupResult, error)
	history     []ClientRepoLookupFuncCall
	mutex       sync.Mutex
}

// RepoLookup delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) RepoLookup(v0 context.Context, v1 protocol.RepoLookupArgs) (*protocol.RepoLookupResult, error) {
	r0, r1 := m.RepoLookupFunc.nextHook()(v0, v1)
	m.RepoLookupFunc.appendCall(ClientRepoLookupFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoLookup method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientRepoLookupFunc) SetDefaultHook(hook func(context.Context, protocol.RepoLookupArgs) (*protocol.RepoLookupResult, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoLookup method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientRepoLookupFunc) PushHook(hook func(context.Context, protocol.RepoLookupArgs) (*protocol.RepoLookupResult, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientRepoLookupFunc) SetDefaultReturn(r0 *protocol.RepoLookupResult, r1 error) {
	f.SetDefaultHook(func(context.Context, protocol.RepoLookupArgs) (*protocol.RepoLookupResult, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientRepoLookupFunc) PushReturn(r0 *protocol.RepoLookupResult, r1 error) {
	f.PushHook(func(context.Context, protocol.RepoLookupArgs) (*protocol.RepoLookupResult, error) {
		return r0, r1
	})
}

func (f *ClientRepoLookupFunc) nextHook() func(context.Context, protocol.RepoLookupArgs) (*protocol.RepoLookupResult, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientRepoLookupFunc) appendCall(r0 ClientRepoLookupFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientRepoLookupFuncCall objects describing
// the invocations of this function.
func (f *ClientRepoLookupFunc) History() []ClientRepoLookupFuncCall {
	f.mutex.Lock()
	history := make([]ClientRepoLookupFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientRepoLookupFuncCall is an object that describes an invocation of
// method RepoLookup on an instance of MockClient.
type ClientRepoLookupFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.RepoLookupArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.RepoLookupResult
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientRepoLookupFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientRepoLookupFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientRepoUpdateSchedulerInfoFunc describes the behavior when the
// RepoUpdateSchedulerInfo method of the parent MockClient instance is
// invoked.
type ClientRepoUpdateSchedulerInfoFunc struct {
	defaultHook func(context.Context, protocol.RepoUpdateSchedulerInfoArgs) (*protocol.RepoUpdateSchedulerInfoResult, error)
	hooks       []func(context.Context, protocol.RepoUpdateSchedulerInfoArgs) (*protocol.RepoUpdateSchedulerInfoResult, error)
	history     []ClientRepoUpdateSchedulerInfoFuncCall
	mutex       sync.Mutex
}

// RepoUpdateSchedulerInfo delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) RepoUpdateSchedulerInfo(v0 context.Context, v1 protocol.RepoUpdateSchedulerInfoArgs) (*protocol.RepoUpdateSchedulerInfoResult, error) {
	r0, r1 := m.RepoUpdateSchedulerInfoFunc.nextHook()(v0, v1)
	m.RepoUpdateSchedulerInfoFunc.appendCall(ClientRepoUpdateSchedulerInfoFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// RepoUpdateSchedulerInfo method of the parent MockClient instance is
// invoked and the hook queue is empty.
func (f *ClientRepoUpdateSchedulerInfoFunc) SetDefaultHook(hook func(context.Context, protocol.RepoUpdateSchedulerInfoArgs) (*protocol.RepoUpdateSchedulerInfoResult, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoUpdateSchedulerInfo method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientRepoUpdateSchedulerInfoFunc) PushHook(hook func(context.Context, protocol.RepoUpdateSchedulerInfoArgs) (*protocol.RepoUpdateSchedulerInfoResult, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientRepoUpdateSchedulerInfoFunc) SetDefaultReturn(r0 *protocol.RepoUpdateSchedulerInfoResult, r1 error) {
	f.SetDefaultHook(func(context.Context, protocol.RepoUpdateSchedulerInfoArgs) (*protocol.RepoUpdateSchedulerInfoResult, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientRepoUpdateSchedulerInfoFunc) PushReturn(r0 *protocol.RepoUpdateSchedulerInfoResult, r1 error) {
	f.PushHook(func(context.Context, protocol.RepoUpdateSchedulerInfoArgs) (*protocol.RepoUpdateSchedulerInfoResult, error) {
		return r0, r1
	})
}

func (f *ClientRepoUpdateSchedulerInfoFunc) nextHook() func(context.Context, protocol.RepoUpdateSchedulerInfoArgs) (*protocol.RepoUpdateSchedulerInfoResult, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientRepoUpdateSchedulerInfoFunc) appendCall(r0 ClientRepoUpdateSchedulerInfoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientRepoUpdateSchedulerInfoFuncCall
// objects describing the invocations of this function.
func (f *ClientRepoUpdateSchedulerInfoFunc) History() []ClientRepoUpdateSchedulerInfoFuncCall {
	f.mutex.Lock()
	history := make([]ClientRepoUpdateSchedulerInfoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientRepoUpdateSchedulerInfoFuncCall is an object that describes an
// invocation of method RepoUpdateSchedulerInfo on an instance of
// MockClient.
type ClientRepoUpdateSchedulerInfoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.RepoUpdateSchedulerInfoArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.RepoUpdateSchedulerInfoResult
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientRepoUpdateSchedulerInfoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientRepoUpdateSchedulerInfoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientSchedulePermsSyncFunc describes the behavior when the
// SchedulePermsSync method of the parent MockClient instance is invoked.
type ClientSchedulePermsSyncFunc struct {
	defaultHook func(context.Context, protocol.PermsSyncRequest) error
	hooks       []func(context.Context, protocol.PermsSyncRequest) error
	history     []ClientSchedulePermsSyncFuncCall
	mutex       sync.Mutex
}

// SchedulePermsSync delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) SchedulePermsSync(v0 context.Context, v1 protocol.PermsSyncRequest) error {
	r0 := m.SchedulePermsSyncFunc.nextHook()(v0, v1)
	m.SchedulePermsSyncFunc.appendCall(ClientSchedulePermsSyncFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SchedulePermsSync
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientSchedulePermsSyncFunc) SetDefaultHook(hook func(context.Context, protocol.PermsSyncRequest) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SchedulePermsSync method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientSchedulePermsSyncFunc) PushHook(hook func(context.Context, protocol.PermsSyncRequest) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientSchedulePermsSyncFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, protocol.PermsSyncRequest) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientSchedulePermsSyncFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, protocol.PermsSyncRequest) error {
		return r0
	})
}

func (f *ClientSchedulePermsSyncFunc) nextHook() func(context.Context, protocol.PermsSyncRequest) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientSchedulePermsSyncFunc) appendCall(r0 ClientSchedulePermsSyncFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientSchedulePermsSyncFuncCall objects
// describing the invocations of this function.
func (f *ClientSchedulePermsSyncFunc) History() []ClientSchedulePermsSyncFuncCall {
	f.mutex.Lock()
	history := make([]ClientSchedulePermsSyncFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientSchedulePermsSyncFuncCall is an object that describes an invocation
// of method SchedulePermsSync on an instance of MockClient.
type ClientSchedulePermsSyncFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.PermsSyncRequest
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientSchedulePermsSyncFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientSchedulePermsSyncFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientSyncExternalServiceFunc describes the behavior when the
// SyncExternalService method of the parent MockClient instance is invoked.
type ClientSyncExternalServiceFunc struct {
	defaultHook func(context.Context, int64) (*protocol.ExternalServiceSyncResult, error)
	hooks       []func(context.Context, int64) (*protocol.ExternalServiceSyncResult, error)
	history     []ClientSyncExternalServiceFuncCall
	mutex       sync.Mutex
}

// SyncExternalService delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) SyncExternalService(v0 context.Context, v1 int64) (*protocol.ExternalServiceSyncResult, error) {
	r0, r1 := m.SyncExternalServiceFunc.nextHook()(v0, v1)
	m.SyncExternalServiceFunc.appendCall(ClientSyncExternalServiceFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SyncExternalService
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientSyncExternalServiceFunc) SetDefaultHook(hook func(context.Context, int64) (*protocol.ExternalServiceSyncResult, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SyncExternalService method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientSyncExternalServiceFunc) PushHook(hook func(context.Context, int64) (*protocol.ExternalServiceSyncResult, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientSyncExternalServiceFunc) SetDefaultReturn(r0 *protocol.ExternalServiceSyncResult, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*protocol.ExternalServiceSyncResult, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientSyncExternalServiceFunc) PushReturn(r0 *protocol.ExternalServiceSyncResult, r1 error) {
	f.PushHook(func(context.Context, int64) (*protocol.ExternalServiceSyncResult, error) {
		return r0, r1
	})
}

func (f *ClientSyncExternalServiceFunc) nextHook() func(context.Context, int64) (*protocol.ExternalServiceSyncResult, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientSyncExternalServiceFunc) appendCall(r0 ClientSyncExternalServiceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientSyncExternalServiceFuncCall objects
// describing the invocations of this function.
func (f *ClientSyncExternalServiceFunc) History() []ClientSyncExternalServiceFuncCall {
	f.mutex.Lock()
	history := make([]ClientSyncExternalServiceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientSyncExternalServiceFuncCall is an object that describes an
// invocation of method SyncExternalService on an instance of MockClient.
type ClientSyncExternalServiceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.ExternalServiceSyncResult
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientSyncExternalServiceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientSyncExternalServiceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
