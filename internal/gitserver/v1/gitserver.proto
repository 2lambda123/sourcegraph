syntax = "proto3";

package gitserver.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/sourcegraph/sourcegraph/internal/gitserver/v1";

service GitserverService {
  rpc Exec(ExecRequest) returns (stream ExecResponse) {}
  rpc Search(SearchRequest) returns (stream SearchResponse) {}
}

message ExecRequest {
  string repo = 1;
  string ensure_revision = 2;
  repeated string args = 3;
  bytes stdin = 4;
  bool no_timeout = 5;
}

message ExecResponse {
  bytes data = 1;
}

message NotFoundPayload {
  string repo = 1;
  bool clone_in_progress = 2;
  string clone_progress = 3;
}

message ExecStatusPayload {
  int32 status_code = 1;
  string stderr = 2;
}

message SearchRequest {
  string repo = 1;
  repeated RevisionSpecifier revisions = 2;
  int64 limit = 5;
  bool include_diff = 4;
  bool include_modified_files = 6;
  QueryNode query = 7;
}

message RevisionSpecifier {
  string rev_spec = 1;
  string ref_glob = 2;
  string exclude_ref_glob = 3;
}

// AuthorMatches is a predicate that matches if the author's name or email address
// matches the regex pattern.
message AuthorMatches {
  string expr = 1;
  bool ignore_case = 2;
}

// CommitterMatches is a predicate that matches if the author's name or email address
// matches the regex pattern.
message CommitterMatches {
  string expr = 1;
  bool ignore_case = 2;
}

// CommitBefore is a predicate that matches if the commit is before the given date
message CommitBefore {
  google.protobuf.Timestamp timestamp = 1;
}

// CommitAfter is a predicate that matches if the commit is after the given date
message CommitAfter {
  google.protobuf.Timestamp timestamp = 1;
}

// MessageMatches is a predicate that matches if the commit message matches
// the provided regex pattern.
message MessageMatches {
  string expr = 1;
  bool ignore_case = 2;
}

// DiffMatches is a a predicate that matches if any of the lines changed by
// the commit match the given regex pattern.
message DiffMatches {
  string expr = 1;
  bool ignore_case = 2;
}

// DiffModifiesFile is a predicate that matches if the commit modifies any files
// that match the given regex pattern.
message DiffModifiesFile {
  string expr = 1;
  bool ignore_case = 2;
}

// Boolean is a predicate that will either always match or never match
message Boolean {
  bool value = 1;
}

enum OperatorKind {
  OPERATOR_KIND_UNSPECIFIED = 0;
  OPERATOR_KIND_AND = 1;
  OPERATOR_KIND_OR = 2;
  OPERATOR_KIND_NOT = 3;
}

message Operator {
  OperatorKind kind = 1;
  repeated QueryNode operands = 2;
}

message QueryNode {
  oneof value {
    AuthorMatches author_matches = 1;
    CommitterMatches committer_matches = 2;
    CommitBefore commit_before = 3;
    CommitAfter commit_after = 4;
    MessageMatches message_matches = 5;
    DiffMatches diff_matches = 6;
    DiffModifiesFile diff_modifies_file = 7;
    Boolean boolean = 8;
    Operator operator = 9;
  }
}

message SearchResponse {
  oneof message {
    CommitMatch match = 1;
    bool limit_hit = 2;
  }
}

message CommitMatch {
  message Signature {
    string name = 1;
    string email = 2;
    google.protobuf.Timestamp date = 3;
  }

  message MatchedString {
    string content = 1;
    repeated Range ranges = 2;
  }

  // TODO move this into a shared package
  message Range {
    Location start = 1;
    Location end = 2;
  }

  message Location {
    uint32 offset = 1;
    uint32 line = 2;
    uint32 column = 3;
  }

  string oid = 1;
  Signature author = 2;
  Signature committer = 3;
  repeated string parents = 4;
  repeated string refs = 5;
  repeated string source_refs = 6;
  MatchedString message = 7;
  MatchedString diff = 8;
  repeated string modified_files = 9;
}
