// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package graphql

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// ValidateTokenCurrentUserUserCore includes the requested fields of the GraphQL type UserCore.
// The GraphQL type's documentation follows.
//
// Core represention of a GitLab user.
type ValidateTokenCurrentUserUserCore struct {
	// Username of the user. Unique within this instance of GitLab.
	Username string `json:"username"`
}

// GetUsername returns ValidateTokenCurrentUserUserCore.Username, and is useful for accessing the field via an interface.
func (v *ValidateTokenCurrentUserUserCore) GetUsername() string { return v.Username }

// ValidateTokenResponse is returned by ValidateToken on success.
type ValidateTokenResponse struct {
	// Get information about current user.
	CurrentUser ValidateTokenCurrentUserUserCore `json:"currentUser"`
}

// GetCurrentUser returns ValidateTokenResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *ValidateTokenResponse) GetCurrentUser() ValidateTokenCurrentUserUserCore {
	return v.CurrentUser
}

// VersionMetadata includes the requested fields of the GraphQL type Metadata.
type VersionMetadata struct {
	// Version.
	Version string `json:"version"`
}

// GetVersion returns VersionMetadata.Version, and is useful for accessing the field via an interface.
func (v *VersionMetadata) GetVersion() string { return v.Version }

// VersionResponse is returned by Version on success.
type VersionResponse struct {
	// Metadata about GitLab.
	Metadata VersionMetadata `json:"metadata"`
}

// GetMetadata returns VersionResponse.Metadata, and is useful for accessing the field via an interface.
func (v *VersionResponse) GetMetadata() VersionMetadata { return v.Metadata }

func ValidateToken(
	ctx context.Context,
	client graphql.Client,
) (*ValidateTokenResponse, error) {
	req := &graphql.Request{
		OpName: "ValidateToken",
		Query: `
query ValidateToken {
	currentUser {
		username
	}
}
`,
	}
	var err error

	var data ValidateTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Version(
	ctx context.Context,
	client graphql.Client,
) (*VersionResponse, error) {
	req := &graphql.Request{
		OpName: "Version",
		Query: `
query Version {
	metadata {
		version
	}
}
`,
	}
	var err error

	var data VersionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
